<?xml version="1.0"?>
<robot name="robot" xmlns:xacro="http://ros.org/wiki/xacro">
  
  <!-- Defining the colors used in this robot -->
  <material name="Black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="Red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

  <material name="White">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>

  <material name="Blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>

  <!-- PROPERTY LIST -->
  <!--All units in m-kg-s-radians unit system -->
  <xacro:property name="M_PI" value="3.1415926535897931" />
  <xacro:property name="M_PI_2" value="1.570796327" />
  <xacro:property name="DEG_TO_RAD" value="0.017453293" />

  <!-- box -->
  <xacro:property name="box_size" value="0.05" />

  <!-- AGV Base -->
  <xacro:property name="agv_base_height" value="0.4" />
  <xacro:property name="agv_base_lift" value="0.025" />
  <xacro:property name="agv_base_width" value="0.495" />
  <xacro:property name="agv_base_length" value="0.73" />
  <xacro:property name="agv_base_mass" value="40" />
  <xacro:property name="agv_wheel_height" value="0.07825" />

  <!-- Macro for calculating inertia of cube -->
  <xacro:macro name="cuboid_inertia" params="m w d h">
    <inertia  ixx="${m*(h*h+d*d)/12}" ixy = "0" ixz = "0"
              iyy="${m*(w*w+d*d)/12}" iyz = "0"
              izz="${m*(w*w+h*h)/12}" /> 
  </xacro:macro>


  <!-- BASE-FOOTPRINT -->
  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
  <link name="base_footprint">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
  </link>

  <gazebo reference="base_footprint">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <!-- Wheel Macro -->
  <xacro:include filename="$(find robo_base_description)/urdf/omni_wheel.urdf.xacro" />

  <!-- WHEELS -->
  <xacro:omni_wheel_250 name="wheel_front_left" parent="agv_base_link">
    <origin xyz="0.22 0.21 ${-agv_base_height/2-agv_base_lift + agv_wheel_height}" rpy="0 0 0" />
  </xacro:omni_wheel_250>
  <xacro:omni_wheel_250 name="wheel_front_right" parent="agv_base_link">
    <origin xyz="0.22 -0.21 ${-agv_base_height/2-agv_base_lift + agv_wheel_height}" rpy="0 0 0" />
  </xacro:omni_wheel_250>
  <xacro:omni_wheel_250 name="wheel_back_left" parent="agv_base_link">
    <origin xyz="-0.22 0.21 ${-agv_base_height/2-agv_base_lift + agv_wheel_height}" rpy="0 0 0" />
  </xacro:omni_wheel_250>
  <xacro:omni_wheel_250 name="wheel_back_right" parent="agv_base_link">
    <origin xyz="-0.22 -0.21 ${-agv_base_height/2-agv_base_lift + agv_wheel_height}" rpy="0 0 0" />
  </xacro:omni_wheel_250>

  <!-- AGV_BASE_LINK -->
  <joint name="base_footprint_agv_base_joint" type="fixed">
    <origin xyz="0 0 ${agv_base_height/2+agv_base_lift}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="agv_base_link" />
  </joint>
  <link name="agv_base_link">
   <inertial>
     <mass value="${agv_base_mass}" />
     <origin xyz="0 0 ${-agv_base_height/2-agv_base_lift}" />
     <cuboid_inertia m="${agv_base_mass}" d="${agv_base_length}" w="${agv_base_width}" h="${agv_base_height}" />
   </inertial>
   <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${agv_base_length} ${agv_base_width} ${agv_base_height}" />
      </geometry>
      <material name="White" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${agv_base_length} ${agv_base_width} ${agv_base_height}" />
      </geometry>
    </collision>
  </link>
  
  <!-- AGV lidar -->
  <joint name="base_footprint_lidar_joint" type="fixed">
	  <origin xyz="0.0 0.0 ${agv_base_height + box_size*2}" rpy="0 0 ${M_PI}" />
    <parent link="base_footprint"/>
    <child link="agv_lidar" />
  </joint>
  <link name="agv_lidar">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${box_size} ${box_size} ${box_size}"/>
      </geometry>
      <material name="Blue" />
    </visual>
  </link>

  <gazebo reference="agv_lidar">
    <material>Gazebo/Blue</material>
    <turnGravityOff>false</turnGravityOff>
    <sensor type="ray" name="agv_lidar">
      <pose>${box_size/2} 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>721</samples>
            <resolution>1</resolution>
            <min_angle>-${M_PI}</min_angle>
            <max_angle>${M_PI}</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>20.0</max>
          <resolution>0.001</resolution>
        </range>
      </ray>
      <plugin name="gazebo_ros_agv_lidar_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>agv_lidar</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- depth camera -->
  <joint name="base_footprint_camera_joint" type="fixed">
	  <origin xyz="${agv_base_length/2 - box_size/2} 0.0 ${agv_base_height + box_size}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="depth_cam" />
  </joint>
  <link name="depth_cam">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${box_size} ${box_size} ${box_size}"/>
      </geometry>
      <material name="Blue" />
    </visual>
  </link>

  <xacro:property name="link_name" value="depth_cam" />
  <xacro:property name="camera_name" value="realsense" />
  <xacro:property name="frame_name" value="depth_cam" />
  <gazebo reference="${link_name}">
    <material>Gazebo/Blue</material>
    <sensor name="${link_name}_camera" type="depth">
      <update_rate>20</update_rate>
      <camera>
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="${link_name}_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <cameraName>${camera_name}_ir</cameraName>
        <imageTopicName>/${camera_name}/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/${camera_name}/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/${camera_name}/depth/image_raw</depthImageTopicName>
        <depthImageInfoTopicName>/${camera_name}/depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>/${camera_name}/depth/points</pointCloudTopicName>
        <frameName>${frame_name}</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Veldoyne Lidar  -->
  <xacro:arg name="gpu" default="false"/>
  <xacro:property name="gpu" value="$(arg gpu)" />
  <xacro:arg name="organize_cloud" default="false"/>
  <xacro:property name="organize_cloud" value="$(arg organize_cloud)" />

  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
  <xacro:VLP-16 parent="base_footprint" name="velodyne" topic="/velodyne_points" organize_cloud="${organize_cloud}" hz="10" samples="440" gpu="${gpu}">
    <origin xyz="0.0 0.0 ${agv_base_height+box_size}" rpy="0 0 0" />
  </xacro:VLP-16>
  
  <gazebo>
    <!-- <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so"> -->
    <plugin name="planar_move_controller" filename="libgazebo_ros_planar_move.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryFrame>odom</odometryFrame> 
      <odometryTopic>odom</odometryTopic> 
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <odometryRate>10.0</odometryRate>
      <publishTF>true</publishTF>
    </plugin>
  </gazebo> 

</robot>
